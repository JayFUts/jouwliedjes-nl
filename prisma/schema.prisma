// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  emailVerified DateTime?
  image         String?
  credits       Int       @default(0) // Number of songs they can generate
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  songs    Song[]
  payments Payment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Song {
  id              String    @id @default(cuid())
  userId          String?   // Optional for guest users
  guestEmail      String?   // Email for guest users
  sunoId          String    @unique // ID from Suno API
  title           String
  prompt          String
  lyrics          String?
  style           String?
  audioUrl        String?
  imageUrl        String?
  videoUrl        String?
  duration        Float?
  status          SongStatus @default(PENDING)
  metadata        Json?     // Store any additional data from Suno
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String        @id @default(cuid())
  userId        String?       // Optional for guest users
  guestEmail    String?       // Email for guest users
  mollieId      String        @unique // Mollie payment ID
  amount        Float         // Amount in EUR
  status        PaymentStatus @default(PENDING)
  songCount     Int           @default(1) // Number of songs purchased
  songData      Json?         // Store song generation data for guest users
  method        String?       // Payment method used
  paidAt        DateTime?
  metadata      Json?         // Store Mollie metadata
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user User? @relation(fields: [userId], references: [id])
}

enum SongStatus {
  PENDING
  GENERATING
  COMPLETED
  FAILED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELED
  EXPIRED
  REFUNDED
}